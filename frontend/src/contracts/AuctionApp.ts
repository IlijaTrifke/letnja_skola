/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "pay(uint64,string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "start_auction(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "force_stop_auction()string": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4NjE3NTYzNzQ2OTZmNmU1ZjY1NmU2NCAweCAweDY4Njk2NzY4NjU3Mzc0NWY2MjY5NjQgMHg2ODY5Njc2ODY1NzM3NDVmNjI2OTY0NjQ2NTcyIDB4MTUxZjdjNzUKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhjNTE3Y2ZjNCAvLyAicGF5KHVpbnQ2NCxzdHJpbmcpc3RyaW5nIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDkwZTRiOWQ5IC8vICJzdGFydF9hdWN0aW9uKHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkODBmNWVhYSAvLyAiZm9yY2Vfc3RvcF9hdWN0aW9uKClzdHJpbmciCj09CmJueiBtYWluX2w1CmVycgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGZvcmNlc3RvcGF1Y3Rpb25jYXN0ZXJfNQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBzdGFydGF1Y3Rpb25jYXN0ZXJfNAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBwYXljYXN0ZXJfMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTAKZXJyCm1haW5fbDEwOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBwYXkKcGF5XzA6CnByb3RvIDIgMQpieXRlY18xIC8vICIiCmJ5dGVjXzAgLy8gImF1Y3Rpb25fZW5kIgphcHBfZ2xvYmFsX2dldApnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCj4KYXNzZXJ0CmJ5dGVjXzAgLy8gImF1Y3Rpb25fZW5kIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAohPQphc3NlcnQKZnJhbWVfZGlnIC0yCmJ5dGVjXzIgLy8gImhpZ2hlc3RfYmlkIgphcHBfZ2xvYmFsX2dldAo+CmFzc2VydApieXRlY18zIC8vICJoaWdoZXN0X2JpZGRlciIKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzIgLy8gImhpZ2hlc3RfYmlkIgpmcmFtZV9kaWcgLTIKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4NDg2OTY3Njg2NTczNzQyMDYyNjk2NDY0NjU3MjIwNjk3MzNhMjAgLy8gIkhpZ2hlc3QgYmlkZGVyIGlzOiAiCmJ5dGVjXzMgLy8gImhpZ2hlc3RfYmlkZGVyIgphcHBfZ2xvYmFsX2dldApjb25jYXQKcHVzaGJ5dGVzIDB4MjA3NzY5NzQ2ODIwNjI2OTY0M2EyMCAvLyAiIHdpdGggYmlkOiAiCmNvbmNhdApieXRlY18yIC8vICJoaWdoZXN0X2JpZCIKYXBwX2dsb2JhbF9nZXQKaXRvYgpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBzdGFydF9hdWN0aW9uCnN0YXJ0YXVjdGlvbl8xOgpwcm90byAyIDAKYnl0ZWNfMCAvLyAiYXVjdGlvbl9lbmQiCmFwcF9nbG9iYWxfZ2V0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKPApieiBzdGFydGF1Y3Rpb25fMV9sMgpieXRlY18wIC8vICJhdWN0aW9uX2VuZCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKc3RhcnRhdWN0aW9uXzFfbDI6CmJ5dGVjXzAgLy8gImF1Y3Rpb25fZW5kIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAo9PQphc3NlcnQKYnl0ZWNfMiAvLyAiaGlnaGVzdF9iaWQiCmZyYW1lX2RpZyAtMgphcHBfZ2xvYmFsX3B1dApieXRlY18wIC8vICJhdWN0aW9uX2VuZCIKZnJhbWVfZGlnIC0xCmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKKwphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGZvcmNlX3N0b3BfYXVjdGlvbgpmb3JjZXN0b3BhdWN0aW9uXzI6CnByb3RvIDAgMQpieXRlY18xIC8vICIiCmJ5dGVjXzAgLy8gImF1Y3Rpb25fZW5kIgphcHBfZ2xvYmFsX2dldAppbnRjXzAgLy8gMAohPQpibnogZm9yY2VzdG9wYXVjdGlvbl8yX2wyCnB1c2hieXRlcyAweDQxNzU2Mzc0Njk2ZjZlMjA2ZTY1NzY2NTcyMjA2NzZmNzQyMDczNzQ2MTcyNzQ2NTY0MjEgLy8gIkF1Y3Rpb24gbmV2ZXIgZ290IHN0YXJ0ZWQhIgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApiIGZvcmNlc3RvcGF1Y3Rpb25fMl9sMwpmb3JjZXN0b3BhdWN0aW9uXzJfbDI6CnB1c2hieXRlcyAweDQxNzU2Mzc0Njk2ZjZlMjA2ODYxNzMyMDYyNjU2NTZlMjA3Mzc0NmY3MDcwNjU2NDIxIC8vICJBdWN0aW9uIGhhcyBiZWVuIHN0b3BwZWQhIgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApmb3JjZXN0b3BhdWN0aW9uXzJfbDM6CmJ5dGVjXzAgLy8gImF1Y3Rpb25fZW5kIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHBheV9jYXN0ZXIKcGF5Y2FzdGVyXzM6CnByb3RvIDAgMApieXRlY18xIC8vICIiCmludGNfMCAvLyAwCmJ5dGVjXzEgLy8gIiIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHBheV8wCmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHN0YXJ0X2F1Y3Rpb25fY2FzdGVyCnN0YXJ0YXVjdGlvbmNhc3Rlcl80Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpjYWxsc3ViIHN0YXJ0YXVjdGlvbl8xCnJldHN1YgoKLy8gZm9yY2Vfc3RvcF9hdWN0aW9uX2Nhc3Rlcgpmb3JjZXN0b3BhdWN0aW9uY2FzdGVyXzU6CnByb3RvIDAgMApieXRlY18xIC8vICIiCmNhbGxzdWIgZm9yY2VzdG9wYXVjdGlvbl8yCmZyYW1lX2J1cnkgMApieXRlYyA0IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "auction_end": {
          "type": "uint64",
          "key": "auction_end",
          "descr": "Timestamp of the auction's end"
        },
        "highest_bid": {
          "type": "uint64",
          "key": "highest_bid",
          "descr": "Highest bid"
        },
        "highest_bidder": {
          "type": "bytes",
          "key": "highest_bidder",
          "descr": "Highest bidder"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "AuctionApp",
    "methods": [
      {
        "name": "pay",
        "args": [
          {
            "type": "uint64",
            "name": "num"
          },
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "place your bid"
      },
      {
        "name": "start_auction",
        "args": [
          {
            "type": "uint64",
            "name": "starting_price"
          },
          {
            "type": "uint64",
            "name": "length"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "start a new auction"
      },
      {
        "name": "force_stop_auction",
        "args": [],
        "returns": {
          "type": "string"
        },
        "desc": "force stop the current auction"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AuctionApp smart contract.
 */
export type AuctionApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'pay(uint64,string)string' | 'pay', {
      argsObj: {
        num: bigint | number
        name: string
      }
      argsTuple: [num: bigint | number, name: string]
      returns: string
    }>
    & Record<'start_auction(uint64,uint64)void' | 'start_auction', {
      argsObj: {
        starting_price: bigint | number
        length: bigint | number
      }
      argsTuple: [starting_price: bigint | number, length: bigint | number]
      returns: void
    }>
    & Record<'force_stop_auction()string' | 'force_stop_auction', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * Timestamp of the auction's end
       */
      'auction_end'?: IntegerState
      /**
       * Highest bid
       */
      'highest_bid'?: IntegerState
      /**
       * Highest bidder
       */
      'highest_bidder'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AuctionAppSig = keyof AuctionApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AuctionAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AuctionApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AuctionAppSig> = AuctionApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AuctionApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AuctionAppSig> = AuctionApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AuctionAppCreateCalls = (typeof AuctionAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AuctionAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AuctionAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AuctionAppCreateCalls) => AuctionAppCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AuctionAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AuctionApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the pay(uint64,string)string ABI method
   *
   * place your bid
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pay(args: MethodArgs<'pay(uint64,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pay(uint64,string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.num, args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the start_auction(uint64,uint64)void ABI method
   *
   * start a new auction
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startAuction(args: MethodArgs<'start_auction(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'start_auction(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.starting_price, args.length],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the force_stop_auction()string ABI method
   *
   * force stop the current auction
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static forceStopAuction(args: MethodArgs<'force_stop_auction()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'force_stop_auction()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AuctionApp smart contract
 */
export class AuctionAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AuctionAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AuctionApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AuctionApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AuctionAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AuctionAppCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AuctionApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AuctionApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the pay(uint64,string)string ABI method.
   *
   * place your bid
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pay(args: MethodArgs<'pay(uint64,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionAppCallFactory.pay(args, params))
  }

  /**
   * Calls the start_auction(uint64,uint64)void ABI method.
   *
   * start a new auction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startAuction(args: MethodArgs<'start_auction(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionAppCallFactory.startAuction(args, params))
  }

  /**
   * Calls the force_stop_auction()string ABI method.
   *
   * force stop the current auction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public forceStopAuction(args: MethodArgs<'force_stop_auction()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionAppCallFactory.forceStopAuction(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AuctionApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get auction_end() {
        return AuctionAppClient.getIntegerState(state, 'auction_end')
      },
      get highest_bid() {
        return AuctionAppClient.getIntegerState(state, 'highest_bid')
      },
      get highest_bidder() {
        return AuctionAppClient.getBinaryState(state, 'highest_bidder')
      },
    }
  }

  public compose(): AuctionAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      pay(args: MethodArgs<'pay(uint64,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startAuction(args: MethodArgs<'start_auction(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      forceStopAuction(args: MethodArgs<'force_stop_auction()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.forceStopAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AuctionAppComposer
  }
}
export type AuctionAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the pay(uint64,string)string ABI method.
   *
   * place your bid
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pay(args: MethodArgs<'pay(uint64,string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionAppComposer<[...TReturns, MethodReturn<'pay(uint64,string)string'>]>

  /**
   * Calls the start_auction(uint64,uint64)void ABI method.
   *
   * start a new auction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startAuction(args: MethodArgs<'start_auction(uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionAppComposer<[...TReturns, MethodReturn<'start_auction(uint64,uint64)void'>]>

  /**
   * Calls the force_stop_auction()string ABI method.
   *
   * force stop the current auction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  forceStopAuction(args: MethodArgs<'force_stop_auction()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionAppComposer<[...TReturns, MethodReturn<'force_stop_auction()string'>]>

  /**
   * Makes a clear_state call to an existing instance of the AuctionApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AuctionAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AuctionAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AuctionAppComposerResults<TReturns>>
}
export type AuctionAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}

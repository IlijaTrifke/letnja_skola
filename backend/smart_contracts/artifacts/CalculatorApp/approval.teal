#pragma version 8
intcblock 0 1
bytecblock 0x746f74616c 0x151f7c75 0x
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0xff9a73d6 // "add(uint64)uint64"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x3c413400 // "subtract(uint64)uint64"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0xbd7593bb // "multiple(uint64)uint64"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x8dec4436 // "divide(uint64)uint64"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x02bece11 // "hello(string)string"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub hellocaster_9
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub dividecaster_8
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub multiplecaster_7
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub subtractcaster_6
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub addcaster_5
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
err
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
intc_1 // 1
return

// add
add_0:
proto 1 1
intc_0 // 0
bytec_0 // "total"
bytec_0 // "total"
app_global_get
frame_dig -1
+
app_global_put
bytec_0 // "total"
app_global_get
frame_bury 0
retsub

// subtract
subtract_1:
proto 1 1
intc_0 // 0
bytec_0 // "total"
app_global_get
frame_dig -1
<
bnz subtract_1_l2
bytec_0 // "total"
bytec_0 // "total"
app_global_get
frame_dig -1
-
app_global_put
b subtract_1_l3
subtract_1_l2:
bytec_0 // "total"
intc_0 // 0
app_global_put
subtract_1_l3:
bytec_0 // "total"
app_global_get
frame_bury 0
retsub

// multiple
multiple_2:
proto 1 1
intc_0 // 0
bytec_0 // "total"
bytec_0 // "total"
app_global_get
frame_dig -1
*
app_global_put
bytec_0 // "total"
app_global_get
frame_bury 0
retsub

// divide
divide_3:
proto 1 1
intc_0 // 0
frame_dig -1
intc_0 // 0
==
bnz divide_3_l2
bytec_0 // "total"
bytec_0 // "total"
app_global_get
frame_dig -1
/
app_global_put
b divide_3_l3
divide_3_l2:
bytec_0 // "total"
intc_0 // 0
app_global_put
divide_3_l3:
bytec_0 // "total"
app_global_get
frame_bury 0
retsub

// hello
hello_4:
proto 1 1
bytec_2 // ""
pushbytes 0x48656c6c6f2c20 // "Hello, "
frame_dig -1
extract 2 0
concat
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// add_caster
addcaster_5:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 1
frame_dig 1
callsub add_0
frame_bury 0
bytec_1 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// subtract_caster
subtractcaster_6:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 1
frame_dig 1
callsub subtract_1
frame_bury 0
bytec_1 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// multiple_caster
multiplecaster_7:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 1
frame_dig 1
callsub multiple_2
frame_bury 0
bytec_1 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// divide_caster
dividecaster_8:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 1
frame_dig 1
callsub divide_3
frame_bury 0
bytec_1 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// hello_caster
hellocaster_9:
proto 0 0
bytec_2 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub hello_4
frame_bury 0
bytec_1 // 0x151f7c75
frame_dig 0
concat
log
retsub